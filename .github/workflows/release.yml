name: "Create release"

env:
  WASI_SDK_PATH: /opt/wasi-sdk

on:
    workflow_dispatch:
        inputs:
            python_version:
                required: true
                description: "Version of CPython to build"
            wasi_sdk_version:
                required: true
                default: 19
                type: number
                description: "WASI SDK version"

permissions:
  contents: write

jobs:
    release:
        name: "Build CPython ${{ inputs.python_version }} using WASI SDK ${{ inputs.wasi_sdk_version }}"
        runs-on: ubuntu-latest
        steps:
          - name: "Install WASI SDK ${{ inputs.wasi_sdk_version }}"
            run: |
              mkdir ${{ env.WASI_SDK_PATH }} && \
              curl -s -S --location https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${{ inputs.wasi_sdk_version }}/wasi-sdk-${{ inputs.wasi_sdk_version }}.0-linux.tar.gz | \
              tar --strip-components 1 --directory ${{ env.WASI_SDK_PATH }} --extract --gunzip
              $WASI_SDK_PATH/bin/clang --version
          - name: "Install wasmtime"
            run: |
              curl https://wasmtime.dev/install.sh -sSf | bash
              mkdir --parents $HOME/.local/bin
              ln -s $HOME/.wasmtime/bin/wasmtime $HOME/.local/bin/
              wasmtime --version
          - name: "Install build dependencies"
            # https://devguide.python.org/getting-started/setup-building/#linux
            # Removed: gdb lcov libncurses5-dev libreadline6-dev tk-dev
            run: |
              sudo apt-get install build-essential pkg-config \
              libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev \
              liblzma-dev libsqlite3-dev libssl-dev \
              lzma lzma-dev uuid-dev zlib1g-dev
          - name: "Install Python"
            uses: actions/setup-python@v4
            with:
              python-version: "3.x"
          - name: "Checkout CPython"
            uses: actions/checkout@v3
            with:
              repository: "python/cpython"
              ref: "v${{ inputs.python_version }}"
          - name: "Build"
            run: python3 Tools/wasm/wasm_build.py wasi build
          - name: "Strip stdlib"
            # Based on preexisting practice; could probably strip out more.
            run: |
              pushd Lib
              rm -rf curses/ ctypes/test/ ensurepip/ distutils/ \
                lib2to3/ idlelib/ test/ multiprocessing/ \
                tkinter/ turtledemo/ venv/ unittest/test/
              popd
              find -name __pycache__ | xargs rm -rf
          - name: "Copy over _sysconfigdata_*.py"
            run: cp builddir/wasi/build/lib.wasi-wasm32-*/_sysconfigdata_*.py Lib/
          - name: "Zip file names"
            run: |
              export ZIP_FILE_NAME=python-${{ inputs.python_version }}-wasi_sdk-${{ inputs.wasi_sdk_version }}.zip
              echo "EXECUTABLE_FILE_NAME=$ZIP_FILE_NAME" >> $GITHUB_ENV
              echo "BUILD_ARTIFACTS_FILE_NAME=_build-$ZIP_FILE_NAME" >> $GITHUB_ENV
          - name: "Create executable zip"
            run: |
              pushd builddir/wasi
              zip ${{ env.EXECUTABLE_FILE_NAME }} python.wasm
              popd
              zip --update -r builddir/wasi/${{ env.EXECUTABLE_FILE_NAME }} Lib/
          - name: "Create build artifact zip"
            run: |
              pushd builddir/wasi
              zip ${{ env.BUILD_ARTIFACTS_FILE_NAME }} \
                config.log config.cache Makefile pyconfig.h libpython*.a \
                Modules/Setup.local Modules/Setup.stdlib Modules/config.c \
                Modules/_decimal/libmpdec/libmpdec.a \
                Modules/expat/libexpat.a \
                Programs/python.o
              popd
          - name: "Create draft release"
            run: |
              gh release create v${{ inputs.python_version }} --title "CPython ${{ inputs.python_version}} w/ WASI SDK ${{ inputs.wasi_sdk_version}}" --repo "brettcannon/cpython-wasi-build" --draft
              gh release upload v${{ inputs.python_version }} builddir/wasi/${{ env.EXECUTABLE_FILE_NAME }} builddir/wasi/${{ env.BUILD_ARTIFACTS_FILE_NAME }} --repo "brettcannon/cpython-wasi-build"
            env:
              GH_TOKEN: ${{ github.token }}
